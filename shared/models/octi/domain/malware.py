"""Define OpenCTI entities."""

from typing import Optional

import pycti  # type: ignore[import-untyped]  # pycti does not provide stubs
import stix2  # type: ignore[import-untyped] # stix2 does not provide stubs
from models.octi.common import DomainObject, KillChainPhase
from models.octi.typings import (
    ImplementationLanguage,
    MalwareCapability,
    MalwareType,
    ProcessorArchitecture,
)
from pydantic import AwareDatetime, Field


class Malware(DomainObject):
    """Represent a malware entity."""

    name: str = Field(
        ...,
        description="Name of the malware.",
        min_length=1,
    )
    is_family: bool = Field(
        ...,
        description="Is the malware a family?",
    )
    description: Optional[str] = Field(
        None,
        description="Description of the malware.",
    )
    aliases: Optional[str] = Field(
        None,
        description="Alternative names used to identify this malware or malware family.",
    )
    types: Optional[list[MalwareType]] = Field(
        None,
        description="Types of the malware.",
    )
    first_seen: Optional[AwareDatetime] = Field(
        None,
        description="The time that this Malware was first seen.",
    )
    last_seen: Optional[AwareDatetime] = Field(
        None,
        description="The time that this Malware was last seen.",
    )
    architecture_execution_env: Optional[list[ProcessorArchitecture]] = Field(
        None,
        description="Architecture execution environment of the malware.",
    )
    implementation_languages: Optional[list[ImplementationLanguage]] = Field(
        None,
        description="Implementation languages of the malware.",
    )
    kill_chain_phases: Optional[list[KillChainPhase]] = Field(
        None,
        description="Kill chain phases of the malware.",
    )
    capabilities: Optional[list[MalwareCapability]] = Field(
        None,
        description="Any of the capabilities identified for the malware instance or family.",
    )
    labels: Optional[list[str]] = Field(
        None,
        description="Labels of the malware.",
    )

    def to_stix2_object(self) -> stix2.v21.Malware:
        """Make stix object."""
        if self._stix2_representation is not None:
            return self._stix2_representation

        return stix2.Malware(
            id=pycti.Malware.generate_id(name=self.name),
            name=self.name,
            is_family=self.is_family,
            description=self.description,
            aliases=self.aliases,
            malware_types=self.types,
            first_seen=self.first_seen,
            last_seen=self.last_seen,
            architecture_execution_envs=self.architecture_execution_env,
            implementation_languages=self.implementation_languages,
            kill_chain_phases=[
                kill_chain_phase.to_stix2_object()
                for kill_chain_phase in self.kill_chain_phases or []
            ],
            capabilities=self.capabilities,
            labels=self.labels,
            external_references=[
                external_reference.to_stix2_object()
                for external_reference in self.external_references or []
            ],
            created_by_ref=self.author.id if self.author else None,
            object_marking_refs=[marking.id for marking in self.markings or []],
            # unused
            created=None,
            modified=None,
            operating_system_refs=None,  # not implemented on OpenCTI
            sample_refs=None,  # not implemented on OpenCTI
            revoked=None,
            confidence=None,
            lang=None,
            granular_markings=None,
            extensions=None,
        )
