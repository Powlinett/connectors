"""Define OpenCTI entities."""

from typing import Optional

import pycti  # type: ignore[import-untyped]  # pycti does not provide stubs
import stix2  # type: ignore[import-untyped] # stix2 does not provide stubs
from models.octi.common import DomainObject
from models.octi.typings import CvssSeverity
from pydantic import Field


class Vulnerability(DomainObject):
    """Represents a vulnerability entity."""

    name: str = Field(
        ...,
        description="Name of the vulnerability.",
        min_length=1,
    )
    description: Optional[str] = Field(
        None,
        description="Description of the vulnerability.",
    )
    aliases: Optional[str] = Field(
        None,
        description="Vulnerability aliases",
    )
    cvss_score: Optional[float] = Field(
        None,
        description="The CVSS v3 base score.",
        ge=0,
        le=10,
    )
    cvss_severity: Optional[CvssSeverity] = Field(
        None,
        description="CVSS3 Severity",
    )
    cvss_attack_vector: Optional[str] = Field(
        None,
        description="CVSS3 Attack vector (AV)",
    )
    cvss_integrity_impact: Optional[str] = Field(
        None,
        description="CVSS3 Integrity impact (I)",
    )
    cvss_availability_impact: Optional[str] = Field(
        None,
        description="CVSS3 Availability impact (A)",
    )
    cvss_confidentiality_impact: Optional[str] = Field(
        None,
        description="CVSS3 Confidentiality impact (C)",
    )
    is_cisa_kev: Optional[bool] = Field(
        None,
        description="Whether vulnerability is a CISA Known Exploited Vulnerability.",
    )
    epss_score: Optional[float] = Field(
        None,
        description="EPSS score.",
        ge=0,
        le=1,
    )
    epss_percentile: Optional[float] = Field(
        None,
        description="EPSS percentile.",
        ge=0,
        le=1,
    )

    def to_stix2_object(self) -> stix2.Vulnerability:
        """Make stix object."""
        return stix2.Vulnerability(
            id=pycti.Vulnerability.generate_id(self.name),
            name=self.name,
            description=self.description,
            external_references=[
                external_reference.to_stix2_object()
                for external_reference in self.external_references or []
            ],
            created_by_ref=self.author.id if self.author else None,
            object_marking_refs=[marking.id for marking in self.markings or []],
            custom_properties=dict(
                x_opencti_aliases=self.aliases,
                x_opencti_cvss_base_score=self.cvss_score,
                x_opencti_cvss_base_severity=self.cvss_severity,
                x_opencti_cvss_attack_vector=self.cvss_attack_vector,
                x_opencti_cvss_integrity_impact=self.cvss_integrity_impact,
                x_opencti_cvss_availability_impact=self.cvss_availability_impact,
                x_opencti_cvss_confidentiality_impact=self.cvss_confidentiality_impact,
                x_opencti_cisa_kev=self.is_cisa_kev,
                x_opencti_epss_score=self.epss_score,
                x_opencti_epss_percentile=self.epss_percentile,
            ),
            # unused
            created=None,
            modified=None,
            revoked=None,
            confidence=None,
            labels=None,
            lang=None,
            granular_markings=None,
            extensions=None,
        )
